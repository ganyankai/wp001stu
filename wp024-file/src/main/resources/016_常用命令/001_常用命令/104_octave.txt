2018/5/9 23:55:08
矩阵转向量
Theta1 = ones(10,11);
Theta2 = 2*ones(10,11);
Theta3 = 3*ones(1,11);
thetaVec = [Theta1(:);Theta2(:);Theta3(:)];
size(thetaVec);

%得到原来的矩阵
reshape(thetaVec(1:110),10,11)
reshape(thetaVec(111:220),10,11)
reshape(thetaVec(221:231),1,11)

2018/5/3 16:50:11
高级优化
 options = optimset('GradObj','on','MaxIter','100');
 initialTheta = zeros(2,1);
 [optTheta,functionVal,exitFlag] = fminunc(@costFunction,initialTheta,options);
 
costFunction.m:
 function [jVal,gradient]= costFunction(theta)
jVal= (theta(1)-5)^2 + (theta(2)-5)^2;
gradient = zeros(2,1);
gradient(1) = 2*(theta(1) -5);
gradient(2) = 2*(theta(2) -5);

 
2018/5/2 15:20:15
流程控制
v= zeros(10,1)
for i= 1:10,v(i)=2^i;end;

 indices=1:10;
for i = indices,disp(i);end;

 while i<= 5,
	v(i)=100;
	i=i+1;
	end;

 while true,
v(i) = 999;
i=i+1;
if i==6,
break;
end;
end;

if v(1) ==1,disp('value 1');elseif v(1)==2,disp('value 2');else disp('none');end;

quit;

函数:
squareThisNumber.m 文件名
function y = squareThisNumber(x)
			
y= x^2;


addpath('d:') %增加默认的搜索路径

X = [1 1;1 2;1 3];
y = [1;2;3];
theta = [0;1];

costFunctionJ.m 文件
function J = costFunctionJ(X,y,theta)
m=size(X,1)
predictions = X*theta;
 % examples
sqrErrors= (predictions-y).^2;
J=1/(2*m) * sum(sqrErrors);



2018/5/1 23:57:47
作图
t=[0:0.01:0.98]
 y1 = sin(2*pi*4*t)
  y2 = cos(2*pi*4*t)
 plot(t,y1)
 hold on
plot(t,y2,'r')
xlabel('time')
ylabel('value')
legend('sin','cos')
 title('my plot')
 cd 'd:'; print -dpng 'myPlot.png'
 close
 
 figure(1);plot(t,y1);
 figure(2);plot(t,y2);
 subplot(1,2,1);
 plot(t,y1);
 axis([0.5 1 -1 1])
 clf
 
 A = magic(5)
 imagesc(A)

 imagesc(A),colorbar ,colormap gray;  %用逗号链接的命令同时执行
 
 
2018/5/1 11:07:50
创建矩阵
A = [1 2;3 4;5 6]
B = [11 12;13 14;15 16]
C = [1 1;2 2]

矩阵运算
A*B
A .* B %逐个元素相乘

v=[1;2;3]
log(v)

exp(v)  % 以e为底数,v中元素为底数的幂运算
abs(v)
-v
A'
max(A) 
[val,ind] = max(a)

a<3
ans =
  1  0  1  1 
 
 find(a<3)
ans =
   1   3   4
   
magic(3)  %幻方矩阵 每行，每列，每对角线的和相同
ans =t=[0:0.01:0.98]
   8   1   6
   3   5   7
   4   9   2
   
[r,c] = find(A>=6) 

a =
    1.00000   15.00000    2.00000    0.50000
sum(a)
ans =  18.500

prod(a)
ans =  15

 floor(a)
ans =
    1   15    2    0

ceil(a)
ans =
    1   15    2    1
    
max(A,[],1)   %默认求每列的最大值
ans =
   8   9   7
max(max(A))

max(A(:))

A =

   16    2    3   13
    5   11   10    8
    9    7    6   12
    4   14   15    1

sum(A,1)
ans =
   34   34   34   34
   
sum(sum(A .* eye(4))) %求对角线之和

sum(sum(A .* flipud(eye(4)))) %flipud使矩阵垂直翻转

pinv(A)

octave中也做了数据可视化